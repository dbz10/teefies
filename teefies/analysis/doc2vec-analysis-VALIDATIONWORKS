{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Attempts at initial analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gensim.test.utils import common_texts\n",
    "from gensim.models.doc2vec import Doc2Vec, TaggedDocument\n",
    "from gensim.summarization import keywords, summarize\n",
    "from sklearn.metrics import accuracy_score, f1_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import preprocessing\n",
    "from sklearn import utils\n",
    "import csv\n",
    "import multiprocessing\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from tqdm import tqdm\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from gensim.models.phrases import Phrases\n",
    "from gensim.models.phrases import Phraser\n",
    "\n",
    "product_info = pd.read_csv('../data/CatfoodProductInfo.csv')\n",
    "reviews = pd.read_csv('../data/CatfoodReviewsInfo.csv')\n",
    "df = reviews.join(product_info.set_index('product'), on='product',how='left')\n",
    "# print(df.columns)\n",
    "# product_info['brand'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 51 brands represented across our reviews.\n",
      "There are 43300 reviews across 671 products\n"
     ]
    }
   ],
   "source": [
    "df = df.dropna(axis=0,how='any')\n",
    "brandnames = set(df['brand'].unique())\n",
    "print(f'There are {len(brandnames)} brands represented across our reviews.')\n",
    "\n",
    "nprods = len(df.groupby('product'))\n",
    "nrevs = len(df)\n",
    "print(f'There are {nrevs} reviews across {nprods} products')\n",
    "# brandnames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43300\n",
      "40508\n"
     ]
    }
   ],
   "source": [
    "print(len(df))\n",
    "exclude_words = ['Variety','Medley','Multi']\n",
    "for word in exclude_words:\n",
    "    df = df[~df['product'].str.contains(word)]\n",
    "    product_info = product_info[~product_info['product'].str.contains(word)]\n",
    "    \n",
    "print(len(df))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Some viz"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/danielben-zion/anaconda3/envs/insight/lib/python3.6/site-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mean_ratings = df.groupby('product').mean()['rating']\n",
    "sns.distplot(mean_ratings,kde=True)\n",
    "plt.xlabel('Rating')\n",
    "plt.title('Across ~40,000 reviews')\n",
    "plt.savefig('plots/individual-ratings-histogram.png',bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "font = {'family' : 'Helvetica Neue',\n",
    "        'weight' : 'normal',\n",
    "        'size'   : 16}\n",
    "\n",
    "matplotlib.rc('font', **font)\n",
    "matplotlib.rc('text', usetex=True)\n",
    "\n",
    "\n",
    "\n",
    "ratings_vs_price = df.groupby('product').mean()[['rating','price_per_oz']]\n",
    "plt.title('626 foods across 50 brands')\n",
    "sns.scatterplot(x='price_per_oz',y='rating',s=60,data=ratings_vs_price)\n",
    "plt.xlabel('Price per Oz');\n",
    "plt.ylabel('Mean Rating');\n",
    "plt.savefig('plots/rating_vs_price.png',bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy.stats import entropy\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "price = df.groupby('product')['price_per_oz'].mean()\n",
    "# stdevs = df.groupby('product')['rating'].apply(lambda r: entropy(r.value_counts()))\n",
    "stdevs = df.groupby('product')['rating'].std()\n",
    "\n",
    "stdev_vs_price = pd.DataFrame(data={'ppo': price, 'stdev': stdevs})\n",
    "sns.scatterplot(x='ppo',y='stdev',data=stdev_vs_price,s=60)\n",
    "\n",
    "\n",
    "# plt.hlines( y=np.log(2), xmin = price.min(), xmax = price.max())\n",
    "\n",
    "# plt.title('Cat food is polarizing')\n",
    "plt.xlabel('Price per Oz')\n",
    "plt.ylabel(\"$\\displaystyle \\sigma^2 $(ratings)\")\n",
    "plt.savefig('plots/variance-vs-price.png',bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## random tfidf stuff. skip down below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "corpus = df['review_text']\n",
    "tfidf = TfidfVectorizer(ngram_range=(1, 1), \n",
    "                        min_df=0.0001, \n",
    "                        stop_words='english')\n",
    "tfidf_matrix = tfidf.fit_transform(corpus)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(38559, 5897)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tfidf_matrix.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from gensim.models.doc2vec import Doc2Vec, TaggedDocument"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "remove_punct = re.compile()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### following https://towardsdatascience.com/implementing-multi-class-text-classification-with-doc2vec-df7c3812824d \n",
    "and(?)\n",
    "https://towardsdatascience.com/multi-class-text-classification-with-doc2vec-logistic-regression-9da9947b43f4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# standardize text\n",
    "def standardize_text(df, text_field):\n",
    "    df[text_field] = df[text_field].str.replace(r\"http\\S+\", \"\")\n",
    "    df[text_field] = df[text_field].str.replace(r\"http\", \"\")\n",
    "    df[text_field] = df[text_field].str.replace(r\"@\\S+\", \"\")\n",
    "    df[text_field] = df[text_field].str.replace(r\"[^A-Za-z0-9(),!?@\\'\\`\\\"\\_\\n]\", \" \")\n",
    "    df[text_field] = df[text_field].str.replace(r\"@\", \"at\")\n",
    "    df[text_field] = df[text_field].str.lower()\n",
    "    for brandname in brandnames:\n",
    "        df[text_field] = df[text_field].str.replace(brandname.lower(),\"\")\n",
    "\n",
    "        \n",
    "    return df\n",
    "\n",
    "# Function for tokenizing\n",
    "def tokenize_text(text):\n",
    "    tokens = []\n",
    "    for sent in nltk.sent_tokenize(text):\n",
    "        for word in nltk.word_tokenize(sent):\n",
    "            if len(word) < 2:\n",
    "                continue\n",
    "            tokens.append(word.lower())\n",
    "    return tokens\n",
    "\n",
    "\n",
    "# Label encode the names\n",
    "le = preprocessing.LabelEncoder()\n",
    "df['product_label']=le.fit_transform(df['product'])\n",
    "\n",
    "# print(train_documents[0])\n",
    "\n",
    "df_clean = standardize_text(df,'review_text')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/danielben-zion/anaconda3/envs/insight/lib/python3.6/site-packages/ipykernel_launcher.py:24: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of reviews prior to dropping short ones 40508\n",
      "Number of reviews after dropping short ones 40508\n"
     ]
    }
   ],
   "source": [
    "from nltk.tokenize import RegexpTokenizer\n",
    "pd.set_option('display.width',200)\n",
    "\n",
    "tokenizer = RegexpTokenizer(r'\\w+')\n",
    "stop_words = set(stopwords.words('english'))\n",
    "df_clean[\"tokens\"] = df_clean[\"review_text\"].apply(tokenizer.tokenize)\n",
    "\n",
    "df_clean['tokens'] = df_clean['tokens'].apply(lambda x: ' '.join( [item for item in x if item not in stop_words]))\n",
    "\n",
    "\n",
    "all_tokens = [t.split() for t in df_clean['tokens']]\n",
    "phrases = Phrases(all_tokens)\n",
    "bigram = Phraser(phrases)\n",
    "trigram_phrases = Phrases(bigram[all_tokens])\n",
    "trigram = Phraser(phrases)\n",
    "\n",
    "df_clean['trigrammed'] = df_clean['tokens'].apply(lambda x: trigram[x.split(' ')])\n",
    "\n",
    "\n",
    "\n",
    "# train, test = train_test_split(df[['review_text','product_label']],test_size=0.0)\n",
    "\n",
    "data = df_clean[['trigrammed','product_label']]\n",
    "data['n_words'] = data['trigrammed'].apply(lambda r: len(r))\n",
    "print(f'Number of reviews prior to dropping short ones {len(data)}')\n",
    "# data = data.loc[data['n_words']>=10]\n",
    "print(f'Number of reviews after dropping short ones {len(data)}')\n",
    "# data.head(5)\n",
    "\n",
    "data_tagged = data.apply(\n",
    "    lambda r: TaggedDocument(words=r['trigrammed'], tags=[r.product_label]), axis=1)\n",
    "\n",
    "# train_tagged = train.apply(\n",
    "#     lambda r: TaggedDocument(words=bigram[tokenize_text(r['review_text'])], tags=[r.product_label]), axis=1)\n",
    "# test_tagged = test.apply(\n",
    "#     lambda r: TaggedDocument(words=bigram[tokenize_text(r['review_text'])], tags=[r.product_label]), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>trigrammed</th>\n",
       "      <th>product_label</th>\n",
       "      <th>n_words</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>23160</th>\n",
       "      <td>[got, 16_year, old_male, cat, urinary_tract, problems, absolutely_loves, think, working]</td>\n",
       "      <td>422</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30589</th>\n",
       "      <td>[strike, outs, brand, winner, 3, house, cats, 5, foster, cats]</td>\n",
       "      <td>578</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36842</th>\n",
       "      <td>[cat, stopped_eating, regular, food, health_issues, guess, wanted, something_new, spending, hundreds_dollars, trying, get, eat, different_brands, varieties, cat, food, one, eat]</td>\n",
       "      <td>112</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41124</th>\n",
       "      <td>[even, cat, eats, anything, cat, needs, way]</td>\n",
       "      <td>505</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4487</th>\n",
       "      <td>[older, cat, likes, gravy, means, eat, pieces, bit, large, older, cat, mash, bit, like, formula]</td>\n",
       "      <td>348</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                                                                              trigrammed  \\\n",
       "23160                                                                                           [got, 16_year, old_male, cat, urinary_tract, problems, absolutely_loves, think, working]   \n",
       "30589                                                                                                                     [strike, outs, brand, winner, 3, house, cats, 5, foster, cats]   \n",
       "36842  [cat, stopped_eating, regular, food, health_issues, guess, wanted, something_new, spending, hundreds_dollars, trying, get, eat, different_brands, varieties, cat, food, one, eat]   \n",
       "41124                                                                                                                                       [even, cat, eats, anything, cat, needs, way]   \n",
       "4487                                                                                    [older, cat, likes, gravy, means, eat, pieces, bit, large, older, cat, mash, bit, like, formula]   \n",
       "\n",
       "       product_label  n_words  \n",
       "23160            422        9  \n",
       "30589            578       10  \n",
       "36842            112       19  \n",
       "41124            505        7  \n",
       "4487             348       15  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('display.max_colwidth',200)\n",
    "data.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TaggedDocument(words=['spent', 'money', 'nothing', 'fault', 'chewy'], tags=[431])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "import multiprocessing\n",
    "cores = multiprocessing.cpu_count()\n",
    "data_tagged.sample(1).values[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 40508/40508 [00:00<00:00, 1352482.16it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1483427.34it/s]\n"
     ]
    }
   ],
   "source": [
    "cores = multiprocessing.cpu_count()\n",
    "\n",
    "model_dbow = Doc2Vec(dm=0, vector_size=200, negative=5, hs=0, min_count=2, sample = 0, workers=cores,\n",
    "                    alpha=0.05)\n",
    "model_dm = Doc2Vec(dm=1, vector_size=200, window=10, negative=5, hs=0, min_count=2, sample=0,\n",
    "                   workers=cores, alpha=0.05, comment='alpha=0.05')\n",
    "model_dbow.build_vocab([x for x in tqdm(data_tagged.values)])\n",
    "model_dm.build_vocab([x for x in tqdm(data_tagged.values)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 40508/40508 [00:00<00:00, 863016.22it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1232707.68it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1489095.92it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1260285.48it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1998034.53it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1377449.34it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1017809.06it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1071016.64it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1028642.06it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 898581.37it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1904121.60it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1060309.08it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1874604.08it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1543631.30it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1562555.10it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1883749.10it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 909164.62it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1309372.50it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1263284.08it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1283894.29it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1629497.99it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1923109.37it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1124841.88it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1147426.38it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 925875.95it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1795254.29it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1860868.39it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 984784.30it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1400833.28it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 412989.04it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 937208.98it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 672754.75it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 252646.30it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 936423.83it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1603129.46it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 925764.96it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1162293.26it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1321964.68it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 2008521.79it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1142188.79it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 635063.06it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1437576.61it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 2006718.87it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 2130309.90it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1638091.65it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1435329.86it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1725725.64it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1349774.51it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 940035.00it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1261961.07it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 890578.93it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1802912.48it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 746678.09it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 928060.75it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1411727.92it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 910538.63it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1172172.36it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1381728.53it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 617604.02it/s]\n",
      "100%|██████████| 40508/40508 [00:00<00:00, 1586172.49it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 5min 43s, sys: 37.5 s, total: 6min 20s\n",
      "Wall time: 5min 13s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "cores = multiprocessing.cpu_count()\n",
    "\n",
    "for epoch in range(30):\n",
    "    model_dbow.train(utils.shuffle([x for x in tqdm(data_tagged.values)]), total_examples=len(data_tagged.values), epochs=1)\n",
    "    model_dbow.alpha -= 0.002\n",
    "    model_dbow.min_alpha = model_dbow.alpha\n",
    "    model_dm.train(utils.shuffle([x for x in tqdm(data_tagged.values)]), total_examples=len(data_tagged.values), epochs=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/danielben-zion/anaconda3/envs/insight/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/Users/danielben-zion/anaconda3/envs/insight/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:469: FutureWarning: Default multi_class will be changed to 'auto' in 0.22. Specify the multi_class option to silence this warning.\n",
      "  \"this warning.\", FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "# # Takes a long time to run!\n",
    "\n",
    "# def vec_for_learning(model, tagged_docs):\n",
    "#     sents = tagged_docs.values\n",
    "#     targets, regressors = zip(*[(doc.tags[0], model.infer_vector(doc.words, steps=20)) for doc in sents])\n",
    "#     return targets, regressors\n",
    "\n",
    "\n",
    "# y_train, X_train = vec_for_learning(model_dbow, train_tagged)\n",
    "# y_test, X_test = vec_for_learning(model_dbow, test_tagged)\n",
    "# logreg = LogisticRegression(n_jobs=1, C=1e5)\n",
    "# logreg.fit(X_train, y_train)\n",
    "# y_pred = logreg.predict(X_test)\n",
    "# from sklearn.metrics import accuracy_score, f1_score\n",
    "# print('Testing accuracy %s' % accuracy_score(y_test, y_pred))\n",
    "# print('Testing F1 score: {}'.format(f1_score(y_test, y_pred, average='weighted')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product</th>\n",
       "      <th>product_label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>39273</th>\n",
       "      <td>Natural Balance Platefulls Chicken &amp; Pumpkin Formula in Gravy Grain-Free Cat Food Pouches, 3-oz pouch, case of 24</td>\n",
       "      <td>349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7335</th>\n",
       "      <td>Royal Canin Veterinary Diet Recovery RS Canned Dog &amp; Cat Food, 5.8-oz, case of 24</td>\n",
       "      <td>504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1262</th>\n",
       "      <td>Blue Buffalo Freedom Indoor Kitten Chicken Recipe Grain-Free Canned Cat Food, 3-oz, case of 24</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20083</th>\n",
       "      <td>Fancy Feast Marinated Morsels Chicken Feast in Gravy Canned Cat Food, 3-oz, case of 24</td>\n",
       "      <td>156</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                 product  product_label\n",
       "39273  Natural Balance Platefulls Chicken & Pumpkin Formula in Gravy Grain-Free Cat Food Pouches, 3-oz pouch, case of 24            349\n",
       "7335                                   Royal Canin Veterinary Diet Recovery RS Canned Dog & Cat Food, 5.8-oz, case of 24            504\n",
       "1262                      Blue Buffalo Freedom Indoor Kitten Chicken Recipe Grain-Free Canned Cat Food, 3-oz, case of 24             35\n",
       "20083                             Fancy Feast Marinated Morsels Chicken Feast in Gravy Canned Cat Food, 3-oz, case of 24            156"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(4)[['product','product_label']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dbow model similarities:\n",
      "0: Fancy Feast Grilled Tuna Feast in Gravy Canned Cat Food, 3-oz, case of 24, 0.6190567016601562\n",
      "1: Nutro Kitten Soft Loaf Chicken Recipe Grain-Free Canned Cat Food, 3-oz, case of 24, 0.5974929928779602\n",
      "2: Friskies Classic Pate Mariner's Catch Canned Cat Food, 5.5-oz, case of 24, 0.5880774259567261\n",
      "3: Fancy Feast Gourmet Naturals Tuna Recipe in Gravy Canned Cat Food, 3-oz, case of 12, 0.5873560905456543\n",
      "4: Halo Chicken Recipe Grain-Free Adult Canned Cat Food, 5.5-oz, case of 12, 0.5851755142211914\n",
      "5: Hill's Prescription Diet k/d Kidney Care Chicken & Vegetable Stew Canned Cat Food, 2.9-oz, case of 24, 0.5831413269042969\n",
      "6: Miko Whole Ingredient Chicken Recipe in Consommé Grain-Free Canned Cat Food, 3-oz, case of 12, 0.5808491110801697\n",
      "7: Fussie Cat Premium Tuna with Ocean Fish Formula in Aspic Grain-Free Canned Cat Food, 2.82-oz, case of 24, 0.5778912305831909\n",
      "8: Wellness Minced Chicken Dinner Grain-Free Canned Cat Food, 5.5-oz, case of 24, 0.5757409334182739\n",
      "9: Dr. Elsey's cleanprotein Turkey Formula Grain-Free Canned Cat Food, 5.5-oz, case of 24, 0.5745016932487488\n",
      "10: Fancy Feast Creamy Delights Chicken Feast Canned Cat Food, 3-oz, case of 24, 0.5744606256484985\n",
      "11: Friskies Pate Salmon Dinner Canned Cat Food, 5.5-oz, case of 24, 0.5738255977630615\n",
      "12: Purina Pro Plan Veterinary Diets DM Dietetic Management Formula Canned Cat Food, 5.5-oz, case of 24, 0.5736765265464783\n",
      "13: Solid Gold Five Oceans Shreds with Real Tuna Recipe in Gravy Grain-Free Canned Cat Food, 6-oz, case of 8, 0.573660135269165\n",
      "14: Triumph Chicken 'N Liver Formula Canned Cat Food, 13.2-oz, case of 12, 0.5731879472732544\n",
      "15: Friskies Tasty Treasures Pate Beef & Liver Dinner with Cheese Canned Cat Food, 5.5-oz, case of 24, 0.5726675987243652\n",
      "16: Hill's Prescription Diet z/d Original Skin/Food Sensitivities Canned Cat Food, 5.5-oz, case of 24, 0.5724694728851318\n",
      "17: Sheba Perfect Portions Grain-Free Roasted Chicken & Liver Entree Cat Food Trays, 2.6-oz, case of 24 twin-packs, 0.5721648931503296\n",
      "18: Fancy Feast Gourmet Naturals Wild Alaskan Salmon & Shrimp Recipe in Gravy Canned Cat Food, 3-oz, case of 12, 0.5720821619033813\n",
      "19: Fancy Feast Gourmet Naturals Trout & Tuna Recipe Pate Canned Cat Food, 3-oz, case of 12, 0.5720087885856628\n",
      "20: Nutro Max Adult Lamb & Turkey Cutlets Entree Chunks in Sauce Canned Cat Food, 3-oz, case of 24, 0.571320652961731\n",
      "21: Fancy Feast Classic Tender Beef Feast Canned Cat Food, 3-oz, case of 24, 0.5710068941116333\n",
      "22: Blue Buffalo Wilderness Turkey Grain-Free Canned Cat Food, 5.5-oz, case of 24, 0.5705968141555786\n",
      "23: Weruva Cats in the Kitchen Chick Magnet Chicken & Mackerel Recipe Grain-Free Cat Food Pouches, 3-oz pouch, case of 12, 0.5704148411750793\n",
      "24: Halo Chicken, Shrimp & Crab Recipe Grain-Free Adult Canned Cat Food, 5.5-oz, case of 12, 0.5697212219238281\n",
      "25: Blue Buffalo Healthy Gourmet Pate Salmon Entree Indoor Adult Canned Cat Food, 5.5-oz, case of 24, 0.5695278644561768\n",
      "26: Hill's Prescription Diet d/d Skin/Food Sensitivities Duck Formula Canned Cat Food, 5.5-oz, case of 24, 0.5693950653076172\n",
      "27: Purina Muse Natural Grain-Free Filets Cat Food Trays, Chicken & Salmon Recipe in Chicken Broth, 2.1-oz, case of 10, 0.569074273109436\n",
      "28: Royal Canin Veterinary Diet Recovery RS Canned Dog & Cat Food, 5.8-oz, case of 24, 0.5686382055282593\n",
      "29: Friskies Flaked with Tuna & Egg in Sauce Canned Cat Food, 5.5-oz, case of 24, 0.5683566331863403\n",
      "30: Friskies Classic Pate Ocean Whitefish & Tuna Dinner Canned Cat Food, 13-oz, case of 12, 0.5680943727493286\n",
      "31: Purina Pro Plan Focus Adult 11+ Classic Salmon & Tuna Entree Canned Cat Food, 3-oz, case of 24, 0.5678462982177734\n",
      "32: HI-TOR Veterinary Select Neo Diet Canned Cat Food, 5.5-oz, case of 24, 0.5674371719360352\n",
      "33: Sheba Perfect Portions Grain-Free Gourmet Chicken & Tuna Entree Cat Food Trays, 2.6-oz, case of 24 twin-packs, 0.567298412322998\n",
      "34: Weruva Cats in the Kitchen Fowl Ball Chicken & Turkey Au Jus Grain-Free Canned Cat Food, 6-oz, case of 24, 0.5672292709350586\n",
      "35: Sheba Perfect Portions Grain-Free Savory Mixed Grill Cuts in Gravy Entree Cat Food Trays, 2.6-oz, case of 24 twin-packs, 0.5661119222640991\n",
      "36: Friskies Prime Filets with Chicken in Gravy Canned Cat Food, 5.5-oz, case of 24, 0.5655229091644287\n",
      "37: Purina Pro Plan Veterinary Diets UR Savory Selects Urinary St/Ox Turkey & Giblets Recipe In Sauce Canned Cat Food, 5.5-oz case of 24, 0.5647149682044983\n",
      "38: AvoDerm Natural Grain-Free Chicken Chunks Entree in Gravy Canned Cat Food, 3-oz, case of 24, 0.5633124113082886\n",
      "39: Hill's Science Diet Adult Liver & Chicken Entree Canned Cat Food, 5.5-oz, case of 24, 0.5632930397987366\n",
      "40: Purina Muse Natural Grain-Free Pate Canned Cat Food, Chicken Recipe, 3-oz, case of 24, 0.563225507736206\n",
      "41: Iams Purrfect Delights Tempt Me Tuna & Mackerel Dinner Flaked in Sauce Canned Cat Food, 3-oz, case of 24, 0.5626437067985535\n",
      "42: Friskies Tasty Treasures with Ocean Fish, Tuna & Cheese in Sauce Canned Cat Food, 5.5-oz, case of 24, 0.5613813996315002\n",
      "43: Blue Buffalo Healthy Gourmet Flaked Fish & Shrimp Entree in Gravy Canned Cat Food, 5.5-oz, case of 24, 0.5607360005378723\n",
      "44: Natural Balance Original Ultra Whole Body Health Reduced Calorie Chicken, Salmon & Duck Formula Canned Cat Food, 6-oz, case of 24, 0.5600079298019409\n",
      "45: Fancy Feast Gourmet Naturals Beef Recipe Pate Canned Cat Food, 3-oz, case of 12, 0.5592201948165894\n",
      "46: Tiny Tiger Chunks in Gravy Tuna Recipe Grain-Free Canned Cat Food, 3-oz, case of 24, 0.5589441061019897\n",
      "47: Hill's Prescription Diet Metabolic Weight Management Vegetable & Chicken Stew Canned Cat Food, 2.9-oz, case of 24, 0.5588537454605103\n",
      "48: Tiny Tiger Pate Beef Recipe Grain-Free Canned Cat Food, 3-oz, case of 24, 0.558319628238678\n",
      "49: Fancy Feast Kitten Tender Ocean Whitefish Feast Canned Cat Food, 3-oz, case of 24, 0.5560735464096069\n",
      "\n",
      " DM model similarities:\n",
      "0: Fancy Feast Delights with Cheddar Grilled Tuna & Cheddar Cheese Feast in Gravy Canned Cat Food, 3-oz, case of 24, 0.47041887044906616\n",
      "1: Friskies Flaked with Tuna in Sauce Canned Cat Food, 5.5-oz, case of 24, 0.46125876903533936\n",
      "2: Friskies Cat Concoctions with Cod in Cheesy Bacon Flavored Sauce Canned Cat Food, 5.5-oz, case of 24, 0.4538393020629883\n",
      "3: Fancy Feast Grilled Tuna Feast in Gravy Canned Cat Food, 3-oz, case of 24, 0.4392855763435364\n",
      "4: Friskies Tasty Treasures with Ocean Fish, Tuna & Cheese in Sauce Canned Cat Food, 5.5-oz, case of 24, 0.42997536063194275\n",
      "5: Meow Mix Tender Favorites with Real Chicken & Liver in Sauce Cat Food Trays, 2.75-oz, case of 12, 0.4268927574157715\n",
      "6: Friskies Flaked with Tuna & Egg in Sauce Canned Cat Food, 5.5-oz, case of 24, 0.42041873931884766\n",
      "7: Iams Purrfect Delights Tuna-Topia Dinner Flaked in Sauce Canned Cat Food, 3-oz, case of 24, 0.41243183612823486\n",
      "8: Friskies Savory Shreds with Ocean Whitefish & Tuna in Sauce Canned Cat Food, 5.5-oz, case of 24, 0.4050484299659729\n",
      "9: Fancy Feast Flaked Tuna & Mackerel Feast Canned Cat Food, 3-oz, case of 24, 0.40422379970550537\n",
      "10: Fancy Feast Marinated Morsels Tuna Feast in Gravy Canned Cat Food, 3-oz, case of 24, 0.3956370949745178\n",
      "11: Meow Mix Tender Favorites with Real Tuna & Whole Shrimp in Sauce Cat Food Trays, 2.75-oz, case of 12, 0.3908829987049103\n",
      "12: Fancy Feast Flaked Tuna Feast Canned Cat Food, 3-oz, case of 24, 0.38860994577407837\n",
      "13: Fancy Feast Classic Ocean Whitefish & Tuna Feast Canned Cat Food, 3-oz, case of 24, 0.38684120774269104\n",
      "14: 9 Lives Hearty Cuts with Real Beef & Chicken in Gravy Canned Cat Food, 5.5-oz, case of 24, 0.38397395610809326\n",
      "15: Fancy Feast Delights with Cheddar Grilled Turkey & Cheddar Cheese Feast in Gravy Canned Cat Food, 3-oz, case of 24, 0.38358256220817566\n",
      "16: Friskies Tasty Treasures Pate Beef & Liver Dinner with Cheese Canned Cat Food, 5.5-oz, case of 24, 0.381988525390625\n",
      "17: Fussie Cat Premium Tuna with Anchovies Formula in Aspic Grain-Free Canned Cat Food, 2.82-oz, case of 24, 0.3805636167526245\n",
      "18: Friskies Tasty Treasures with Chicken, Tuna & Cheese in Gravy Canned Cat Food, 5.5-oz, case of 24, 0.37895381450653076\n",
      "19: Fancy Feast Marinated Morsels Turkey Feast in Gravy Canned Cat Food, 3-oz, case of 24, 0.374397337436676\n",
      "20: Tiki Cat Lanai Grill Tuna in Crab Surimi Consomme Grain-Free Canned Cat Food, 6-oz, case of 8, 0.3610590994358063\n",
      "21: Fancy Feast Grilled Beef Feast in Gravy Canned Cat Food, 3-oz, case of 24, 0.36032378673553467\n",
      "22: Fancy Feast Delights with Cheddar Grilled Whitefish & Cheddar Cheese Feast in Gravy Canned Cat Food, 3-oz, case of 24, 0.35942304134368896\n",
      "23: AvoDerm Natural Grain-Free Tuna & Crab Entree in Gravy Canned Cat Food, 3-oz, case of 24, 0.35854411125183105\n",
      "24: Fancy Feast Purely Tender Tongol Tuna Wet Cat Food, 2-oz tray, case of 10, 0.3574307858943939\n",
      "25: Weruva Truluxe Mediterranean Harvest with Tuna & Veggies in Gravy Grain-Free Canned Cat Food, 3-oz, case of 24, 0.3562251031398773\n",
      "26: Fancy Feast Creamy Delights Chicken Feast in a Creamy Sauce Canned Cat Food, 3-oz, case of 24, 0.35560858249664307\n",
      "27: Friskies Classic Pate Ocean Whitefish & Tuna Dinner Canned Cat Food, 13-oz, case of 12, 0.34820741415023804\n",
      "28: Iams Purrfect Delights Packed with Sardines Dinner Flaked in Sauce Canned Cat Food, 3-oz, case of 24, 0.3461063504219055\n",
      "29: Fancy Feast Flaked Chicken & Tuna Feast Canned Cat Food, 3-oz, case of 24, 0.34309685230255127\n",
      "30: Sheba Perfect Portions Grain-Free Signature Tuna Cuts in Gravy Entree Cat Food Trays, 2.6-oz, case of 24 twin-packs, 0.34273117780685425\n",
      "31: Friskies Savory Shreds with Whitefish & Sardines in Sauce Canned Cat Food, 5.5-oz, case of 24, 0.34156060218811035\n",
      "32: Friskies Indoor Saucy Seafood Bake Canned Cat Food, 5.5-oz, case of 24, 0.3415551781654358\n",
      "33: Fancy Feast Grilled Turkey & Giblets Feast in Gravy Canned Cat Food, 3-oz, case of 24, 0.3401373624801636\n",
      "34: Friskies Classic Pate Supreme Supper Canned Cat Food, 5.5-oz, case of 24, 0.3357544243335724\n",
      "35: Hill's Prescription Diet Metabolic + Urinary Tuna & Vegetable Stew Canned Cat Food, 2.9-oz, case of 24, 0.33559632301330566\n",
      "36: Purina Pro Plan Savor Adult Tuna Entree in Sauce Canned Cat Food, 3-oz, case of 24, 0.3323625922203064\n",
      "37: Fancy Feast Chunky Chicken Feast Canned Cat Food, 3-oz, case of 24, 0.332111656665802\n",
      "38: Fussie Cat Premium Tuna with Shrimp Formula in Aspic Grain-Free Canned Cat Food, 2.82-oz, case of 24, 0.3318050503730774\n",
      "39: Fancy Feast Flaked Salmon & Ocean Whitefish Feast Canned Cat Food, 3-oz, case of 24, 0.3315160274505615\n",
      "40: Fancy Feast Chunky Chopped Grill Feast Canned Cat Food, 3-oz, case of 24, 0.3300016522407532\n",
      "41: Fancy Feast Creamy Delights Chicken Feast Canned Cat Food, 3-oz, case of 24, 0.3289034068584442\n",
      "42: Hill's Prescription Diet k/d Kidney Care Vegetable & Tuna Stew Canned Cat Food, 2.9-oz, case of 24, 0.32656168937683105\n",
      "43: Solid Gold Five Oceans Shreds with Real Tuna Recipe in Gravy Grain-Free Canned Cat Food, 6-oz, case of 8, 0.3263646960258484\n",
      "44: Friskies Classic Pate Chicken & Tuna Dinner Canned Cat Food, 5.5-oz, case of 24, 0.32620149850845337\n",
      "45: Hill's Science Diet Adult Tender Tuna Dinner Canned Cat Food, 5.5-oz, case of 24, 0.3254839777946472\n",
      "46: Iams Purrfect Delights Tempt Me Tuna & Mackerel Dinner Flaked in Sauce Canned Cat Food, 3-oz, case of 24, 0.3235812187194824\n",
      "47: Friskies Tasty Treasures with Chicken & Cheese in Gravy Canned Cat Food, 5.5-oz, case of 24, 0.3231513202190399\n",
      "48: Friskies Tasty Treasures with Turkey & Cheese in Gravy Canned Cat Food, 5.5-oz, case of 24, 0.3225134611129761\n",
      "49: Fancy Feast Purely Seabass & Shrimp Wet Cat Food, 2-oz tray, case of 10, 0.3222329020500183\n",
      "Cat liked: Blue Buffalo Basics Limited Ingredient Grain-Free Indoor Fish & Potato Entree Adult Canned Cat Food, 3-oz, case of 24, American Journey Minced Turkey Recipe in Gravy Grain-Free Canned Cat Food, 3-oz, case of 24. Cat disliked: Friskies Classic Pate Poultry Platter Canned Cat Food, 13-oz, case of 12, Friskies Prime Filets with Ocean Whitefish & Tuna in Sauce Canned Cat Food, 5.5-oz, case of 24\n",
      "\n",
      " Combined scores\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>combined</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>product</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Fancy Feast Grilled Tuna Feast in Gravy Canned Cat Food, 3-oz, case of 24</th>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Friskies Tasty Treasures Pate Beef &amp; Liver Dinner with Cheese Canned Cat Food, 5.5-oz, case of 24</th>\n",
       "      <td>15.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Friskies Flaked with Tuna &amp; Egg in Sauce Canned Cat Food, 5.5-oz, case of 24</th>\n",
       "      <td>17.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Friskies Tasty Treasures with Ocean Fish, Tuna &amp; Cheese in Sauce Canned Cat Food, 5.5-oz, case of 24</th>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fancy Feast Delights with Cheddar Grilled Tuna &amp; Cheddar Cheese Feast in Gravy Canned Cat Food, 3-oz, case of 24</th>\n",
       "      <td>25.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fancy Feast Creamy Delights Chicken Feast Canned Cat Food, 3-oz, case of 24</th>\n",
       "      <td>25.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nutro Kitten Soft Loaf Chicken Recipe Grain-Free Canned Cat Food, 3-oz, case of 24</th>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Friskies Flaked with Tuna in Sauce Canned Cat Food, 5.5-oz, case of 24</th>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Friskies Classic Pate Mariner's Catch Canned Cat Food, 5.5-oz, case of 24</th>\n",
       "      <td>26.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Friskies Cat Concoctions with Cod in Cheesy Bacon Flavored Sauce Canned Cat Food, 5.5-oz, case of 24</th>\n",
       "      <td>26.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                                  combined\n",
       "product                                                                                                                   \n",
       "Fancy Feast Grilled Tuna Feast in Gravy Canned Cat Food, 3-oz, case of 24                                              1.5\n",
       "Friskies Tasty Treasures Pate Beef & Liver Dinner with Cheese Canned Cat Food, 5.5-oz, case of 24                     15.5\n",
       "Friskies Flaked with Tuna & Egg in Sauce Canned Cat Food, 5.5-oz, case of 24                                          17.5\n",
       "Friskies Tasty Treasures with Ocean Fish, Tuna & Cheese in Sauce Canned Cat Food, 5.5-oz, case of 24                  23.0\n",
       "Fancy Feast Delights with Cheddar Grilled Tuna & Cheddar Cheese Feast in Gravy Canned Cat Food, 3-oz, case of 24      25.5\n",
       "Fancy Feast Creamy Delights Chicken Feast Canned Cat Food, 3-oz, case of 24                                           25.5\n",
       "Nutro Kitten Soft Loaf Chicken Recipe Grain-Free Canned Cat Food, 3-oz, case of 24                                    26.0\n",
       "Friskies Flaked with Tuna in Sauce Canned Cat Food, 5.5-oz, case of 24                                                26.0\n",
       "Friskies Classic Pate Mariner's Catch Canned Cat Food, 5.5-oz, case of 24                                             26.5\n",
       "Friskies Cat Concoctions with Cod in Cheesy Bacon Flavored Sauce Canned Cat Food, 5.5-oz, case of 24                  26.5"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label_decoder = df[['product_label','product']].set_index('product_label').to_dict()['product']\n",
    "label_encoder = df[['product_label','product']].set_index('product').to_dict()['product_label']\n",
    "\n",
    "num_returned = 50\n",
    "results_shown = 10\n",
    "\n",
    "pd.set_option('display.max_colwidth', 200)\n",
    "positives = [67,2]\n",
    "negatives = [228,361]\n",
    "positives = [2]\n",
    "negatives = []\n",
    "\n",
    "similarity_results = pd.DataFrame(index = product_info['product'],columns = ['dbow_rank','dm_rank','combined'])\n",
    "similar_items_dbow = model_dbow.docvecs.most_similar(positive=positives,negative = negatives,topn=num_returned)\n",
    "similar_items_dm = model_dm.docvecs.most_similar(positive=positives,negative = negatives,topn=num_returned)\n",
    "#     print(similar_items)\n",
    "decoded_dbow = [(label_decoder[label],similarity) for (label,similarity) in similar_items_dbow]\n",
    "decoded_dm = [(label_decoder[label],similarity) for (label,similarity) in similar_items_dm]\n",
    "\n",
    "print(\"Dbow model similarities:\")\n",
    "for (rank, product) in enumerate(decoded_dbow):\n",
    "    name = product[0]\n",
    "    score = product[1]\n",
    "    similarity_results.loc[name,\"dbow_rank\"] = rank\n",
    "    print(f'{rank}: {name}, {score}')\n",
    "\n",
    "print(\"\\n DM model similarities:\")\n",
    "for (rank, product) in enumerate(decoded_dm):\n",
    "    name = product[0]\n",
    "    score = product[1]\n",
    "    similarity_results.loc[name,\"dm_rank\"] = rank\n",
    "    print(f'{rank}: {name}, {score}')\n",
    "\n",
    "similarity_results.fillna(value=num_returned+1,inplace=True)\n",
    "similarity_results[\"combined\"] = (similarity_results[\"dbow_rank\"] + similarity_results[\"dm_rank\"])/2\n",
    "\n",
    "\n",
    "print(f'Cat liked: {label_decoder[30]}, {label_decoder[7]}. Cat disliked: {label_decoder[183]}, {label_decoder[215]}')\n",
    "print(\"\\n Combined scores\")\n",
    "similarity_results.sort_values(by='combined',ascending=True).drop(columns=['dbow_rank','dm_rank'],axis=0).head(results_shown)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "af = product_info\n",
    "af['product_label']=le.fit_transform(af['product'])\n",
    "brand_list = {name : brand for (name,brand) in zip(af['product'],af['brand'])}\n",
    "\n",
    "sample_brands = ['Fancy Feast',\n",
    "                 'Friskies',\n",
    "                 'Blue Buffalo',\n",
    "                 'Purina Pro Plan', \n",
    "                 'Hills Prescription Diet',\n",
    "#                  'Weruva',\n",
    "                 'Wellness',\n",
    "                ]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "vec_list = {name : model_dbow.docvecs[x] for (name,x) in zip(af['product'].to_list(),af['product_label'].to_list()) if brand_list[name] in sample_brands\n",
    "           };\n",
    "\n",
    "embeddings = pd.DataFrame.from_dict(vec_list,orient='index')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/danielben-zion/anaconda3/envs/insight/lib/python3.6/site-packages/sklearn/metrics/pairwise.py:258: RuntimeWarning: invalid value encountered in sqrt\n",
      "  return distances if squared else np.sqrt(distances, out=distances)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1a39473588>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# from sklearn.decomposition import PCA\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import umap \n",
    "\n",
    "%matplotlib inline\n",
    "# pca = PCA(n_components=2)\n",
    "embeddings_viz = umap.UMAP(min_dist = 0.03).fit_transform(embeddings)\n",
    "brand_name = [brand_list[name] for name in embeddings.index]\n",
    "\n",
    "fig = plt.figure(figsize=(10,10))\n",
    "sns.scatterplot(x=embeddings_viz[:,0], y=embeddings_viz[:,1],hue = brand_name, s = 60)\n",
    "plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n",
    "\n",
    "# plt.savefig('plots/BrandSeparation.png',bbox_inches='tight')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Nutro Perfect Portions Grain-Free Salmon & Tuna Recipe Cat Food Trays, 2.6-oz, case of 24',\n",
       "       'Nutro Adult Chunky Loaf  Salmon & Tuna Dinner Grain-Free Canned Cat Food, 3-oz, case of 24',\n",
       "       'Nutro Kitten Soft Loaf Chicken Recipe Grain-Free Canned Cat Food, 3-oz, case of 24',\n",
       "       'Nutro Perfect Portions Grain-Free Chicken Recipe Cat Food Trays, 2.6-oz, case of 24',\n",
       "       'Nutro Perfect Portions Grain-Free Turkey Recipe Cat Food Trays, 2.6-oz, case of 24',\n",
       "       'Nutro Adult Sliced Chicken & Tuna Entrée in Savory Sauce Grain-Free Canned Cat Food, 3-oz, case of 24',\n",
       "       'Nutro Senior Minced Cod & Tuna Cuisine in Tasty Gravy Grain-Free Canned Cat Food, 3-oz, case of 24'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "product_info[product_info['brand']==\"Nutro\"]['product'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "# save what we need to use in the backend\n",
    "\n",
    "# the model\n",
    "model_dbow.save('catfood-d2v-dbow.model')\n",
    "model_dm.save('catfood-d2v-dm.model')\n",
    "\n",
    "# the label decoder\n",
    "with open(\"label-decoder.pkl\",\"wb\") as f:\n",
    "    pickle.dump(label_decoder,f)\n",
    "    \n",
    "# the label encoder\n",
    "with open(\"label-encoder.pkl\",\"wb\") as f:\n",
    "    pickle.dump(label_encoder,f)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## validation attempts, pray to god"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "author_count = df.groupby('review_author')['review_author'].count()\n",
    "authorgroup = author_count[(author_count > 10) & (author_count < 20)]\n",
    "# authorgroup\n",
    "# authorgroup = author_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "def scale_scores(df,field):\n",
    "    scaleby = max(np.abs(df[field].min()),np.abs(df[field].max()))\n",
    "    df[field] = df[field]/scaleby\n",
    "    return df\n",
    "\n",
    "def generate_val_data(user):\n",
    "    num_returned = 1000\n",
    "    userdata = df[df['review_author']==user]\n",
    "    \n",
    "    if len(userdata.groupby('rating').count()) == 1:\n",
    "        return\n",
    "    \n",
    "    \n",
    "\n",
    "    \n",
    "    low_rankings = userdata[userdata['rating'] <= 3].sort_values(by='rating',ascending=True)\n",
    "    high_rankings = userdata[userdata['rating'] >= 4].sort_values(by='rating',ascending=False)\n",
    "    \n",
    "    \n",
    "#     if len(low_rankings) < 3:\n",
    "#         return\n",
    "    \n",
    "    \n",
    "    negatives = [val for val in low_rankings.head(2)['product_label']]\n",
    "    positives = [val for val in high_rankings.head(2)['product_label']]\n",
    "    \n",
    "    similar_items_dbow = model_dbow.docvecs.most_similar(positive=positives,negative = negatives,topn=num_returned)\n",
    "    similar_items_dm = model_dm.docvecs.most_similar(positive=positives,negative = negatives,topn=num_returned)\n",
    "\n",
    "    decoded_dbow = [(label_decoder[label],similarity) for (label,similarity) in similar_items_dbow]\n",
    "    decoded_dm = [(label_decoder[label],similarity) for (label,similarity) in similar_items_dm]\n",
    "\n",
    "    dbow_results = pd.DataFrame(decoded_dbow,columns=['product','sim_score'])\n",
    "    dbow_results = scale_scores(dbow_results,'sim_score')\n",
    "\n",
    "    dm_results = pd.DataFrame(decoded_dm,columns=['product','sim_score'])\n",
    "    dm_results = scale_scores(dm_results,'sim_score')\n",
    "\n",
    "    combined_results = dbow_results.set_index('product').join(dm_results.set_index('product'), how = 'left', \n",
    "                                        lsuffix = '_db', rsuffix = '_dm')\n",
    "\n",
    "\n",
    "    combined_results['avg_sim'] = (combined_results['sim_score_db'] + combined_results['sim_score_dm'])/2\n",
    "    \n",
    "    tmp = userdata[['product','rating']].set_index('product')\n",
    "    val = tmp.join(combined_results,how='left')\n",
    "    val.dropna(how='any',axis=0,inplace=True)\n",
    "    \n",
    "#     val['rating'] = val['rating'] - val['rating'].mean()\n",
    "    \n",
    "    return val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "val = pd.concat([generate_val_data(user) for user in authorgroup.index],axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,axes = plt.subplots(nrows=1,ncols=3,figsize=(12,4))\n",
    "\n",
    "\n",
    "a = sns.boxplot(x='sim_score_dm',y='rating',\n",
    "                    dodge=False,linewidth=2.5,orient='h',data=val,ax = axes[0])\n",
    "a.invert_yaxis()\n",
    "\n",
    "b = sns.boxplot(x='sim_score_db',y='rating',\n",
    "                    dodge=False,linewidth=2.5,orient='h',data=val,ax = axes[1])\n",
    "b.invert_yaxis()\n",
    "\n",
    "c = sns.boxplot(x='avg_sim',y='rating',\n",
    "                    dodge=False,linewidth=2.5,orient='h',data=val,ax = axes[2])\n",
    "c.invert_yaxis()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
